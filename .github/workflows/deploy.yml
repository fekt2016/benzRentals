name: üöÄ FTP Deployment to cPanel

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual triggering

env:
  NODE_VERSION: "20.x"
  SITE_URL: "https://benzflex.com"

jobs:
  deploy:
    name: üéâ Deploy to Production
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ env.SITE_URL }}

    steps:
      # 1. Checkout repository
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for proper versioning

      # 2. Setup Node.js
      - name: ‚öôÔ∏è Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: package-lock.json

      # 3. Install dependencies
      - name: üì¶ Install dependencies
        run: |
          npm ci --audit=false --fund=false
          echo "‚úÖ Dependencies installed successfully"

      # 4. Build project with validation
      - name: üî® Build project
        run: |
          echo "üèóÔ∏è Starting build process..."
          npm run build

          # Validate build output
          if [ -d "dist" ]; then
            echo "‚úÖ Build completed - dist directory found"
            BUILD_SIZE=$(du -sh dist | cut -f1)
            echo "üìä Build size: $BUILD_SIZE"
          elif [ -d "build" ]; then
            echo "‚úÖ Build completed - build directory found"
            BUILD_SIZE=$(du -sh build | cut -f1)
            echo "üìä Build size: $BUILD_SIZE"
          else
            echo "‚ùå No build directory found!"
            echo "üìÅ Current directory contents:"
            ls -la
            exit 1
          fi

      # 5. Detect and validate build directory
      - name: üìÅ Detect build directory
        id: build-dir
        run: |
          if [ -d "dist" ]; then
            echo "directory=dist" >> $GITHUB_OUTPUT
            echo "‚úÖ Using dist directory"
          elif [ -d "build" ]; then
            echo "directory=build" >> $GITHUB_OUTPUT
            echo "‚úÖ Using build directory"
          else
            echo "‚ùå ERROR: No build directory found!"
            echo "Creating emergency build structure..."
            mkdir -p dist
            cat > dist/index.html << EOF
            <!DOCTYPE html>
            <html>
            <head>
                <title>BenzFlex - Deployment in Progress</title>
                <style>
                    body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
                    .status { color: #666; margin-top: 20px; }
                </style>
            </head>
            <body>
                <h1>üöó BenzFlex</h1>
                <p>Site deployment in progress...</p>
                <div class="status">Last updated: $(date)</div>
            </body>
            </html>
            EOF
            echo "directory=dist" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Created emergency build structure"
          fi

      # 6. Validate build contents
      - name: üîç Validate build output
        run: |
          BUILD_DIR="${{ steps.build-dir.outputs.directory }}"
          echo "üîç Validating build contents in: $BUILD_DIR"

          if [ ! -f "$BUILD_DIR/index.html" ]; then
            echo "‚ö†Ô∏è WARNING: No index.html found in build output"
          fi

          echo "üìÅ Build contents:"
          find "$BUILD_DIR" -type f -name "*.html" -o -name "*.js" -o -name "*.css" | head -10

          TOTAL_FILES=$(find "$BUILD_DIR" -type f | wc -l)
          echo "üìä Total files to deploy: $TOTAL_FILES"

      # 7. Deploy to FTP with enhanced configuration
      - name: üì§ Deploy to FTP Server
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          # FTP Configuration
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          protocol: ftp
          port: 21
          timeout: 10000

          # Deployment Paths
          local-dir: ${{ steps.build-dir.outputs.directory }}/
          server-dir: ./public_html/

          # Security & Optimization
          dangerous-clean-slate: false
          exclude: |
            **/.git*
            **/.github/**
            **/.gitignore
            **/.editorconfig
            **/.eslintrc.*
            **/.prettierrc.*
            **/README.md
            **/CHANGELOG.md
            **/LICENSE
            **/package.json
            **/package-lock.json
            **/node_modules/**
            **/src/**
            **/public/**
            **/*.config.js
            **/*.config.ts
            **/tsconfig.json
            **/jsconfig.json
            **/.env*
            **/docker-compose.yml
            **/Dockerfile
            **/nginx.conf
            **/backup/
            **/temp/
            **/test/
            **/tests/
            **/__tests__/
            **/*.test.js
            **/*.spec.js
            **/cypress/
            **/jest.config.*

          # Performance
          log-level: normal
          security: loose
          dry-run: false

      # 8. Post-deployment verification
      - name: ‚úÖ Verify deployment
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "üåê Live Site: ${{ env.SITE_URL }}"
          echo "üìÅ Deployed from: ${{ steps.build-dir.outputs.directory }}/"
          echo "üìÅ Deployed to: /public_html/"
          echo "‚è∞ Deployment time: $(date)"
          echo "üîó Commit: ${{ github.sha }}"
          echo "üìù Message: ${{ github.event.head_commit.message }}"

      # 9. Optional: Health check (if you have API endpoints)
      - name: ü©∫ Health check
        run: |
          echo "Performing health check..."
          if command -v curl &> /dev/null; then
            curl -f -s -o /dev/null -w "HTTP Status: %{http_code}\n" ${{ env.SITE_URL }} || echo "‚ö†Ô∏è Health check failed - site might be loading"
          else
            echo "‚ÑπÔ∏è curl not available - skipping health check"
          fi

    # Environment variables for the job
    env:
      NODE_ENV: production
      CI: true
